#!/usr/bin/env node

// Generates 'map-previews/maplist.js'
// from output of scripts/generate-test-map-previews
// so that you can visit map-previews/viewer.html and have a nice time looking at maps

let fs = require('fs');

let readFileAsString = function(file) {
	return new Promise( (resolve,reject) => {
		fs.readFile(file, {encoding: 'utf-8'}, (error,data) => {
			if( error ) reject(error);
			else resolve(data);
		});
	});
};

let readDir = function(dir) {
	return new Promise( (resolve,reject) => {
		fs.readdir(dir, (error,entries) => {
			if( error ) reject(error);
			else resolve(entries);
		});
	});
};

let stat = function(file) {
	return new Promise( (resolve,reject) => {
		fs.stat(file, (error,stat) => {
			if(error) reject(error);
			else resolve(stat);
		});
	});
}

readDir("map-previews").then( (potentialMapNames) => {
	let entries = [];
	let prom = Promise.resolve();
	for( let e in potentialMapNames ) {
		let mapName = potentialMapNames[e];
		let mapPath = "map-previews/"+mapName;
		prom = prom.then( () => {
			return stat(mapPath).then( (stat) => {
				if( stat.isDirectory() ) {
					let dirCtime = stat.ctime;
					let mapInfoFile = mapPath+"/map-info.json";
					return readFileAsString(mapInfoFile).then( (mapInfoJson) => {
						return JSON.parse(mapInfoJson);
					}, (err) => {
						return {};
					}).catch( (err) => {
						console.error("Error decoding JSON from "+mapInfoFile+":");
						console.error(err.stack);
						return {};
					}).then( (mapInfo) => {
						if( !mapInfo.name ) mapInfo.name = mapName;
						if( !mapInfo.creationTime ) mapInfo.creationTime = dirCtime;
						entries.push(mapInfo)
					});
				}
			});
		});
	}
	return prom.then( () => {
		return entries.sort( (e0,e1) => {
			return e0.creationTime < e1.creationTime ? -1 : e0.creationTime > e1.creationTime ? +1 : 0;
		});
	});
}).then( entries => {
	process.stdout.write("window.mapList = "+JSON.stringify(entries, null, "\t")+";\n");
}).catch( (err) => {
	console.error(err.stack);
	process.exitCode = 1;
});
