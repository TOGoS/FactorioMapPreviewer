#!/usr/bin/env node
"use strict";

/*
	To compare these results to actual resource generation, try in the console something like:
	
	local coal_amount = 0
	local coals = game.surfaces.nauvis.find_entities_filtered({area = {{-256,-256},{256,256}}, name = "coal"})
	for k,coal in pairs(coals) do
		coal_amount = coal_amount + coal.amount
	end
	game.player.print("Total coal: " .. coal_amount)
*/

const fs = require('fs');
const readline = require('readline');

const readDir = function(dir) {
	return new Promise( (resolve,reject) => {
		fs.readdir(dir, (error,entries) => {
			if( error ) reject(error);
			else resolve(entries);
		});
	});
};

const stat = function(file) {
	return new Promise( (resolve,reject) => {
		fs.stat(file, (error,stat) => {
			if(error) reject(error);
			else resolve(stat);
		});
	});
};

const eachLogFile = function(fileOrDir, callback) {
	return stat(fileOrDir).then( (stat) => {
		if( stat.isDirectory() ) {
			return readDir(fileOrDir).then( (list) => {
				let proz = [];
				for( let n in list ) {
					let name = list[n];
					proz.push(eachLogFile(fileOrDir+"/"+name, callback));
				}
				return Promise.all(proz);
			});
		} else if( fileOrDir.endsWith(".log") ) {
			let val = callback(fileOrDir);
			return (val && val.then) ? val : Promise.resolve();
		}
	});
};

const readFileLines = function(file, callback) {
	let stream = fs.createReadStream(file);
	let rl = readline.createInterface({
		input: stream
	});
	return new Promise( (resolve,reject) => {
		rl.on('line', callback);
		rl.on('close', resolve);
	});
};

const toSortedList = function(arr, comparator) {
	let list = [];
	for( let a in arr ) list.push(arr[a]);
	return list.sort(comparator);
};

const makeEntryKey = function(mapName, scale, resourceName) {
	return mapName + ".scale" + scale + ".resource" + resourceName;
};

const finalmente = function( promise, callback ) {
	return promise.then(
		(result) => { callback(); return result; },
		(error) => { callback(); return Promise.reject(error); }
	);
};

const forWriteStream = function(name, callback) {
	if( name == undefined ) return Promise.resolve(callback(process.stdout));
	
	let stream = fs.createWriteStream(name);
	return finalmente(callback(stream), () => {
		stream.end();
	});
};


const mapNameRegex = /([^\/]*?)(?:\.scale(.*))?\.log$/;
const totesRegex = /Total ([\w\-]+):\s+(.*)$/;

let targetResourceName = undefined;
let outfilePrefix = undefined; // If undefined we'll output to STDOUT, in which case you'd better specify which resource you care about
let outputKey = 'amount';

for( let i=2; i<process.argv.length; ++i ) {
	let arg = process.argv[i];
	let m;
	if( (m = /^--resource=(.*)$/.exec(arg)) ) {
		targetResourceName = m[1];
	} else if( (m = /^--outfile-prefix=(.*)$/.exec(arg)) ) {
		outfilePrefix = m[1];
	} else if( '--per-tile' == arg ) {
		outputKey = 'amountPerTile';
	} else {
		console.error("Unrecognized argument "+arg);
		process.exit(1);
	}
}

if( targetResourceName == undefined && outfilePrefix == undefined ) {
	console.error("You must either specify an --outfile-prefix=PATH or a --resource=RESOURCE");
	process.exit(1);
}

let entries = {};
let mapNames = {};
let scales = {};
let logFileCount = 0;
let resourceNames = {};
eachLogFile("map-previews", (logFile) => {
	let m;
	if( !(m = mapNameRegex.exec(logFile)) ) {
		console.log("sja "+logFile);
		return;
	}
	let mapName = m[1];
	let scale = m[2] || '001.0';
	let mapSideLength = scale*1024;
	let mapArea = mapSideLength*mapSideLength;
	return readFileLines(logFile, (line) => {
		let m = totesRegex.exec(line);
		if( m ) {
			let resourceName = m[1];
			if( targetResourceName != undefined && resourceName != targetResourceName ) return;
			let amount = m[2];
			mapNames[mapName] = mapName;
			scales[scale] = scale;
			resourceNames[resourceName] = resourceName;
			entries[makeEntryKey(mapName, scale, resourceName)] = {
				mapName,
				scale,
				resourceName,
				amount,
				amountPerTile: amount/mapArea,
			};
		}
	}).then( () => {
		++logFileCount;
	});
}).then( () => {
	let sortedMapNames = toSortedList(mapNames);
	let sortedScales = toSortedList(scales);
	//console.log("Read "+logFileCount+" logs");
	//console.log("Resources: "+toSortedList(resourceNames).join(", "));
	//console.log("Maps: "+sortedMapNames.join(", "));
	let proz = [];
	for( let resourceName in resourceNames ) {
		proz.push(forWriteStream( (outfilePrefix ? outfilePrefix + resourceName + ".csv" : undefined), (outstream) => {
			{
				let csvArr = [];
				csvArr.push("map name");
				for( let s in sortedScales ) {
					csvArr.push(sortedScales[s]);
				}
				outstream.write(csvArr.join(",")+"\n");
			}
			for( let m in sortedMapNames ) {
				let mapName = sortedMapNames[m];
				let csvArr = [mapName];
				for( let s in sortedScales ) {
					let scale = sortedScales[s];
					let entry = entries[makeEntryKey(mapName, scale, resourceName)];
					csvArr.push( entry ? entry[outputKey] : '' );
				}
				outstream.write(csvArr.join(",")+"\n");
			}
			return Promise.resolve();
		}));
	}
	return Promise.all(proz);
}).catch( (err) => {
	console.error(err.stack);
	process.exit(1);
});
