#!/bin/bash

set -euo pipefail

. "$(dirname "$0")/initvars.sh"
. "$(dirname "$0")/../.map-preview-capabilities.sh"

overwrite_existing_output=1
print_preview_image_urls=
vername=
verbose_flag=
verbose=
scales="000.5 001.0 002.0 004.0 008.0 016.0 032.0 100.0"
offset=0,0
map_description=
after_each_map=

while [ $# -gt 0 ]
do
    arg="$1"
    shift
    case $arg in
	--seed)
	    mapgen_seeds="$1"
	    shift
	    ;;
	--map-gen-settings)
	    mapgen_settings_file="$1"
	    shift
	    ;;
	--single-scale)
	    scales=001.0
	    ;;
	--slope-shading)
	    slope_shading="$1"
	    shift
	    ;;
	--scale)
	    scales="$1"
	    shift
	    ;;
	-v)
	    verbose=1
	    verbose_flag=-v
	    ;;
	-n)
	    vername="$1"
	    shift
	    ;;
	--m)
	    map_description="$1"
	    shift
	    ;;
	--after-each-map)
	    after_each_map="$1"
	    shift
	    ;;
	--description-from-commit)
	    map_description="$(cd "${factorio_dir}" && git log -1 --pretty=%B)"
	    ;;
	--offset)
	    offset="$1"
	    shift
	    ;;
	--print-preview-image-urls)
	    print_preview_image_urls=1
	    ;;
	--ignore-existing)
	    overwrite_existing_output=
	    ;;
	*)
	    echo "$0: Error: Unrecognized argument: $arg" >&2
	    exit 1
    esac
done

if [ -z "$vername" ] ; then
    vername="$(cd "$factorio_dir" && git rev-parse HEAD)"
fi

offset_suffix=".offset$(echo "$offset" | sed -e 's/,/x/')"

mapgen_settings_arg=""
if [ -n "$mapgen_settings_file" ] ; then
    mapgen_settings_arg="--map-gen-settings=$mapgen_settings_file"
fi

slope_shading_arg=""
if [ -n "$factorio_supports_slope_shading" ] ; then
    slope_shading_arg="--slope-shading=${slope_shading}"
fi

for mapgen_seed in $mapgen_seeds
do
    map_name="$vername.seed$mapgen_seed"
    map_dir="${map_previews_dir}/${map_name}"
    map_info_file="${map_dir}/map-info.json"
    
    mkdir -p "$map_dir"
    
    if [ -n "$map_description" ] ; then
	jq -n '{description: $description}' --arg description "$map_description" > "$map_info_file"
    fi
    
    if [ -n "$factorio_supports_report_quantities_argument" ]
    then
	report_quantities_arg="--report-quantities=coal,copper-ore,iron-ore,stone,uranium-ore,biter-spawner,spitter-spawner"
    else
	report_quantities_arg=""
    fi
    
    for scale in $scales
    do
	basefile="${map_dir}/${map_name}${offset_suffix}.scale$scale"
	outfile="${basefile}.png"
	logfile="${basefile}.log"
	tile_properties_csv_file="${basefile}.tile-properties.csv"
	
	if [ -n "$factorio_supports_generating_tile_properties_csv" ]
	then
	    generate_tile_properties_csv_arg="--generate-tile-properties-csv=$tile_properties_csv_file"
	else
	    generate_tile_properties_csv_arg=""
	fi
	
	if [ ! -f "$outfile" ] || [ ! -f "$logfile" ] || [ -n "$overwrite_existing_output" ]
	then
	    "$factorio_exe" $verbose_flag \
			    "$mapgen_settings_arg" \
			    $slope_shading_arg \
			    $report_quantities_arg \
			    $generate_tile_properties_csv_arg \
			    --map-gen-seed="$mapgen_seed" \
			    --generate-map-preview="$outfile" \
			    --map-preview-scale="$scale" \
			    --map-preview-size="$map_width" \
			    --map-preview-offset="$offset" \
			    >"$logfile" 2>&1 && (
		if [ -n "$verbose" ]
		then
		    cat "$logfile"
		fi
	    ) || (
		echo "Error: Failed to generate $outfile" >&2
		cat "$logfile" >&2
		exit 1
	    )
	    if [ -n "$print_preview_image_urls" ] ; then
		echo "file://$(pwd)/${outfile}"
	    fi
	else
	    echo "$0: $outfile already exists; skipping" >&2
	fi
	# Either way touch the directory so that regenerating the msp list
	# puts it in the right order:
	touch "$map_dir"
    done

    if [ -n "$after_each_map" ] ; then
	sh -c "$after_each_map"
    fi
done
